pipeline {
    agent {
        docker {
            image 'abhishekf5/maven-abhishek-docker-agent:v1'
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // Mount Docker socket to access the host's Docker daemon
        }
    }
    stages {
        stage('Checkout') {
            steps {
                sh 'echo "Checkout Stage Passed"'
                // Uncomment and configure if necessary:
                // git branch: 'main', url: 'https://github.com/iam-veeramalla/Jenkins-Zero-To-Hero.git'
            }
        }
        stage('Build and Test') {
            steps {
                sh '''
                    echo "Listing files in workspace:"
                    ls -ltr
                    echo "Building the project and creating JAR file"
                    cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package
                '''
            }
        }
        stage('Static Code Analysis') {
            environment {
                SONAR_URL = "http://192.168.44.213:9000"
            }
            steps {
                withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                    sh '''
                        echo "Running SonarQube analysis"
                        cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
                        mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}
                    '''
                }
            }
        }
        stage('Build and Push Docker Image') {
            environment {
                DOCKER_IMAGE = "sheshu009/ultimate-cicd:v${BUILD_NUMBER}"
            }
            steps {
                script {
                    sh '''
                        echo "Building Docker image"
                        cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
                        docker build -t ${DOCKER_IMAGE} .
                    '''
                    def dockerImage = docker.image("${DOCKER_IMAGE}")
                    docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                        echo "Pushing Docker image to the registry"
                        dockerImage.push()
                    }
                }
            }
        }
        stage('Update Deployment File') {
            environment {
                GIT_REPO_NAME = "Jenkins-Zero-To-Hero"
                GIT_USER_NAME = "Shesh009"
            }
            steps {
                withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                    sh '''
                        echo "Configuring Git"
                        git config user.email "Sheshusheshu035@gmail.com"
                        git config user.name "Sheshu Akula"
                        
                        echo "DEBUG: Before replacing image tag"
                        cat java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                        
                        echo "Updating deployment.yml with new image tag"
                        sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                        
                        echo "DEBUG: After replacing image tag"
                        cat java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                        
                        echo "Staging changes"
                        git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                        
                        echo "Committing changes"
                        git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                        
                        echo "Pushing changes to the repository"
                        git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                    '''
                }
            }
        }
    }
}
